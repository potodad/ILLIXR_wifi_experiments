// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vio_input.proto

#ifndef PROTOBUF_INCLUDED_vio_5finput_2eproto
#define PROTOBUF_INCLUDED_vio_5finput_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vio_5finput_2eproto 

namespace protobuf_vio_5finput_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_vio_5finput_2eproto
namespace vio_input_proto {
class IMUCamData;
class IMUCamDataDefaultTypeInternal;
extern IMUCamDataDefaultTypeInternal _IMUCamData_default_instance_;
class IMUCamVec;
class IMUCamVecDefaultTypeInternal;
extern IMUCamVecDefaultTypeInternal _IMUCamVec_default_instance_;
class Vec3;
class Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
}  // namespace vio_input_proto
namespace google {
namespace protobuf {
template<> ::vio_input_proto::IMUCamData* Arena::CreateMaybeMessage<::vio_input_proto::IMUCamData>(Arena*);
template<> ::vio_input_proto::IMUCamVec* Arena::CreateMaybeMessage<::vio_input_proto::IMUCamVec>(Arena*);
template<> ::vio_input_proto::Vec3* Arena::CreateMaybeMessage<::vio_input_proto::Vec3>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace vio_input_proto {

// ===================================================================

class Vec3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vio_input_proto.Vec3) */ {
 public:
  Vec3();
  virtual ~Vec3();

  Vec3(const Vec3& from);

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vec3(Vec3&& from) noexcept
    : Vec3() {
    *this = ::std::move(from);
  }

  inline Vec3& operator=(Vec3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3* internal_default_instance() {
    return reinterpret_cast<const Vec3*>(
               &_Vec3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vec3* other);
  friend void swap(Vec3& a, Vec3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vec3* New() const final {
    return CreateMaybeMessage<Vec3>(NULL);
  }

  Vec3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vec3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:vio_input_proto.Vec3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vio_5finput_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMUCamData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vio_input_proto.IMUCamData) */ {
 public:
  IMUCamData();
  virtual ~IMUCamData();

  IMUCamData(const IMUCamData& from);

  inline IMUCamData& operator=(const IMUCamData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUCamData(IMUCamData&& from) noexcept
    : IMUCamData() {
    *this = ::std::move(from);
  }

  inline IMUCamData& operator=(IMUCamData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUCamData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUCamData* internal_default_instance() {
    return reinterpret_cast<const IMUCamData*>(
               &_IMUCamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IMUCamData* other);
  friend void swap(IMUCamData& a, IMUCamData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUCamData* New() const final {
    return CreateMaybeMessage<IMUCamData>(NULL);
  }

  IMUCamData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMUCamData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMUCamData& from);
  void MergeFrom(const IMUCamData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUCamData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes img0_data = 6;
  void clear_img0_data();
  static const int kImg0DataFieldNumber = 6;
  const ::std::string& img0_data() const;
  void set_img0_data(const ::std::string& value);
  #if LANG_CXX11
  void set_img0_data(::std::string&& value);
  #endif
  void set_img0_data(const char* value);
  void set_img0_data(const void* value, size_t size);
  ::std::string* mutable_img0_data();
  ::std::string* release_img0_data();
  void set_allocated_img0_data(::std::string* img0_data);

  // bytes img1_data = 7;
  void clear_img1_data();
  static const int kImg1DataFieldNumber = 7;
  const ::std::string& img1_data() const;
  void set_img1_data(const ::std::string& value);
  #if LANG_CXX11
  void set_img1_data(::std::string&& value);
  #endif
  void set_img1_data(const char* value);
  void set_img1_data(const void* value, size_t size);
  ::std::string* mutable_img1_data();
  ::std::string* release_img1_data();
  void set_allocated_img1_data(::std::string* img1_data);

  // .vio_input_proto.Vec3 angular_vel = 2;
  bool has_angular_vel() const;
  void clear_angular_vel();
  static const int kAngularVelFieldNumber = 2;
  private:
  const ::vio_input_proto::Vec3& _internal_angular_vel() const;
  public:
  const ::vio_input_proto::Vec3& angular_vel() const;
  ::vio_input_proto::Vec3* release_angular_vel();
  ::vio_input_proto::Vec3* mutable_angular_vel();
  void set_allocated_angular_vel(::vio_input_proto::Vec3* angular_vel);

  // .vio_input_proto.Vec3 linear_accel = 3;
  bool has_linear_accel() const;
  void clear_linear_accel();
  static const int kLinearAccelFieldNumber = 3;
  private:
  const ::vio_input_proto::Vec3& _internal_linear_accel() const;
  public:
  const ::vio_input_proto::Vec3& linear_accel() const;
  ::vio_input_proto::Vec3* release_linear_accel();
  ::vio_input_proto::Vec3* mutable_linear_accel();
  void set_allocated_linear_accel(::vio_input_proto::Vec3* linear_accel);

  // fixed64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // int32 rows = 4;
  void clear_rows();
  static const int kRowsFieldNumber = 4;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // int32 cols = 5;
  void clear_cols();
  static const int kColsFieldNumber = 5;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vio_input_proto.IMUCamData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr img0_data_;
  ::google::protobuf::internal::ArenaStringPtr img1_data_;
  ::vio_input_proto::Vec3* angular_vel_;
  ::vio_input_proto::Vec3* linear_accel_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vio_5finput_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMUCamVec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vio_input_proto.IMUCamVec) */ {
 public:
  IMUCamVec();
  virtual ~IMUCamVec();

  IMUCamVec(const IMUCamVec& from);

  inline IMUCamVec& operator=(const IMUCamVec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUCamVec(IMUCamVec&& from) noexcept
    : IMUCamVec() {
    *this = ::std::move(from);
  }

  inline IMUCamVec& operator=(IMUCamVec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUCamVec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUCamVec* internal_default_instance() {
    return reinterpret_cast<const IMUCamVec*>(
               &_IMUCamVec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(IMUCamVec* other);
  friend void swap(IMUCamVec& a, IMUCamVec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUCamVec* New() const final {
    return CreateMaybeMessage<IMUCamVec>(NULL);
  }

  IMUCamVec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMUCamVec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMUCamVec& from);
  void MergeFrom(const IMUCamVec& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUCamVec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vio_input_proto.IMUCamData imu_cam_data = 1;
  int imu_cam_data_size() const;
  void clear_imu_cam_data();
  static const int kImuCamDataFieldNumber = 1;
  ::vio_input_proto::IMUCamData* mutable_imu_cam_data(int index);
  ::google::protobuf::RepeatedPtrField< ::vio_input_proto::IMUCamData >*
      mutable_imu_cam_data();
  const ::vio_input_proto::IMUCamData& imu_cam_data(int index) const;
  ::vio_input_proto::IMUCamData* add_imu_cam_data();
  const ::google::protobuf::RepeatedPtrField< ::vio_input_proto::IMUCamData >&
      imu_cam_data() const;

  // fixed64 real_timestamp = 2;
  void clear_real_timestamp();
  static const int kRealTimestampFieldNumber = 2;
  ::google::protobuf::uint64 real_timestamp() const;
  void set_real_timestamp(::google::protobuf::uint64 value);

  // fixed64 dataset_timestamp = 3;
  void clear_dataset_timestamp();
  static const int kDatasetTimestampFieldNumber = 3;
  ::google::protobuf::uint64 dataset_timestamp() const;
  void set_dataset_timestamp(::google::protobuf::uint64 value);

  // int32 frame_id = 4;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 4;
  ::google::protobuf::int32 frame_id() const;
  void set_frame_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vio_input_proto.IMUCamVec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vio_input_proto::IMUCamData > imu_cam_data_;
  ::google::protobuf::uint64 real_timestamp_;
  ::google::protobuf::uint64 dataset_timestamp_;
  ::google::protobuf::int32 frame_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vio_5finput_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec3

// double x = 1;
inline void Vec3::clear_x() {
  x_ = 0;
}
inline double Vec3::x() const {
  // @@protoc_insertion_point(field_get:vio_input_proto.Vec3.x)
  return x_;
}
inline void Vec3::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:vio_input_proto.Vec3.x)
}

// double y = 2;
inline void Vec3::clear_y() {
  y_ = 0;
}
inline double Vec3::y() const {
  // @@protoc_insertion_point(field_get:vio_input_proto.Vec3.y)
  return y_;
}
inline void Vec3::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:vio_input_proto.Vec3.y)
}

// double z = 3;
inline void Vec3::clear_z() {
  z_ = 0;
}
inline double Vec3::z() const {
  // @@protoc_insertion_point(field_get:vio_input_proto.Vec3.z)
  return z_;
}
inline void Vec3::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:vio_input_proto.Vec3.z)
}

// -------------------------------------------------------------------

// IMUCamData

// fixed64 timestamp = 1;
inline void IMUCamData::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IMUCamData::timestamp() const {
  // @@protoc_insertion_point(field_get:vio_input_proto.IMUCamData.timestamp)
  return timestamp_;
}
inline void IMUCamData::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:vio_input_proto.IMUCamData.timestamp)
}

// .vio_input_proto.Vec3 angular_vel = 2;
inline bool IMUCamData::has_angular_vel() const {
  return this != internal_default_instance() && angular_vel_ != NULL;
}
inline void IMUCamData::clear_angular_vel() {
  if (GetArenaNoVirtual() == NULL && angular_vel_ != NULL) {
    delete angular_vel_;
  }
  angular_vel_ = NULL;
}
inline const ::vio_input_proto::Vec3& IMUCamData::_internal_angular_vel() const {
  return *angular_vel_;
}
inline const ::vio_input_proto::Vec3& IMUCamData::angular_vel() const {
  const ::vio_input_proto::Vec3* p = angular_vel_;
  // @@protoc_insertion_point(field_get:vio_input_proto.IMUCamData.angular_vel)
  return p != NULL ? *p : *reinterpret_cast<const ::vio_input_proto::Vec3*>(
      &::vio_input_proto::_Vec3_default_instance_);
}
inline ::vio_input_proto::Vec3* IMUCamData::release_angular_vel() {
  // @@protoc_insertion_point(field_release:vio_input_proto.IMUCamData.angular_vel)
  
  ::vio_input_proto::Vec3* temp = angular_vel_;
  angular_vel_ = NULL;
  return temp;
}
inline ::vio_input_proto::Vec3* IMUCamData::mutable_angular_vel() {
  
  if (angular_vel_ == NULL) {
    auto* p = CreateMaybeMessage<::vio_input_proto::Vec3>(GetArenaNoVirtual());
    angular_vel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vio_input_proto.IMUCamData.angular_vel)
  return angular_vel_;
}
inline void IMUCamData::set_allocated_angular_vel(::vio_input_proto::Vec3* angular_vel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete angular_vel_;
  }
  if (angular_vel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular_vel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_vel, submessage_arena);
    }
    
  } else {
    
  }
  angular_vel_ = angular_vel;
  // @@protoc_insertion_point(field_set_allocated:vio_input_proto.IMUCamData.angular_vel)
}

// .vio_input_proto.Vec3 linear_accel = 3;
inline bool IMUCamData::has_linear_accel() const {
  return this != internal_default_instance() && linear_accel_ != NULL;
}
inline void IMUCamData::clear_linear_accel() {
  if (GetArenaNoVirtual() == NULL && linear_accel_ != NULL) {
    delete linear_accel_;
  }
  linear_accel_ = NULL;
}
inline const ::vio_input_proto::Vec3& IMUCamData::_internal_linear_accel() const {
  return *linear_accel_;
}
inline const ::vio_input_proto::Vec3& IMUCamData::linear_accel() const {
  const ::vio_input_proto::Vec3* p = linear_accel_;
  // @@protoc_insertion_point(field_get:vio_input_proto.IMUCamData.linear_accel)
  return p != NULL ? *p : *reinterpret_cast<const ::vio_input_proto::Vec3*>(
      &::vio_input_proto::_Vec3_default_instance_);
}
inline ::vio_input_proto::Vec3* IMUCamData::release_linear_accel() {
  // @@protoc_insertion_point(field_release:vio_input_proto.IMUCamData.linear_accel)
  
  ::vio_input_proto::Vec3* temp = linear_accel_;
  linear_accel_ = NULL;
  return temp;
}
inline ::vio_input_proto::Vec3* IMUCamData::mutable_linear_accel() {
  
  if (linear_accel_ == NULL) {
    auto* p = CreateMaybeMessage<::vio_input_proto::Vec3>(GetArenaNoVirtual());
    linear_accel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vio_input_proto.IMUCamData.linear_accel)
  return linear_accel_;
}
inline void IMUCamData::set_allocated_linear_accel(::vio_input_proto::Vec3* linear_accel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete linear_accel_;
  }
  if (linear_accel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_accel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_accel, submessage_arena);
    }
    
  } else {
    
  }
  linear_accel_ = linear_accel;
  // @@protoc_insertion_point(field_set_allocated:vio_input_proto.IMUCamData.linear_accel)
}

// int32 rows = 4;
inline void IMUCamData::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 IMUCamData::rows() const {
  // @@protoc_insertion_point(field_get:vio_input_proto.IMUCamData.rows)
  return rows_;
}
inline void IMUCamData::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:vio_input_proto.IMUCamData.rows)
}

// int32 cols = 5;
inline void IMUCamData::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 IMUCamData::cols() const {
  // @@protoc_insertion_point(field_get:vio_input_proto.IMUCamData.cols)
  return cols_;
}
inline void IMUCamData::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:vio_input_proto.IMUCamData.cols)
}

// bytes img0_data = 6;
inline void IMUCamData::clear_img0_data() {
  img0_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMUCamData::img0_data() const {
  // @@protoc_insertion_point(field_get:vio_input_proto.IMUCamData.img0_data)
  return img0_data_.GetNoArena();
}
inline void IMUCamData::set_img0_data(const ::std::string& value) {
  
  img0_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vio_input_proto.IMUCamData.img0_data)
}
#if LANG_CXX11
inline void IMUCamData::set_img0_data(::std::string&& value) {
  
  img0_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vio_input_proto.IMUCamData.img0_data)
}
#endif
inline void IMUCamData::set_img0_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  img0_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vio_input_proto.IMUCamData.img0_data)
}
inline void IMUCamData::set_img0_data(const void* value, size_t size) {
  
  img0_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vio_input_proto.IMUCamData.img0_data)
}
inline ::std::string* IMUCamData::mutable_img0_data() {
  
  // @@protoc_insertion_point(field_mutable:vio_input_proto.IMUCamData.img0_data)
  return img0_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMUCamData::release_img0_data() {
  // @@protoc_insertion_point(field_release:vio_input_proto.IMUCamData.img0_data)
  
  return img0_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMUCamData::set_allocated_img0_data(::std::string* img0_data) {
  if (img0_data != NULL) {
    
  } else {
    
  }
  img0_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img0_data);
  // @@protoc_insertion_point(field_set_allocated:vio_input_proto.IMUCamData.img0_data)
}

// bytes img1_data = 7;
inline void IMUCamData::clear_img1_data() {
  img1_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMUCamData::img1_data() const {
  // @@protoc_insertion_point(field_get:vio_input_proto.IMUCamData.img1_data)
  return img1_data_.GetNoArena();
}
inline void IMUCamData::set_img1_data(const ::std::string& value) {
  
  img1_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vio_input_proto.IMUCamData.img1_data)
}
#if LANG_CXX11
inline void IMUCamData::set_img1_data(::std::string&& value) {
  
  img1_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vio_input_proto.IMUCamData.img1_data)
}
#endif
inline void IMUCamData::set_img1_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  img1_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vio_input_proto.IMUCamData.img1_data)
}
inline void IMUCamData::set_img1_data(const void* value, size_t size) {
  
  img1_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vio_input_proto.IMUCamData.img1_data)
}
inline ::std::string* IMUCamData::mutable_img1_data() {
  
  // @@protoc_insertion_point(field_mutable:vio_input_proto.IMUCamData.img1_data)
  return img1_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMUCamData::release_img1_data() {
  // @@protoc_insertion_point(field_release:vio_input_proto.IMUCamData.img1_data)
  
  return img1_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMUCamData::set_allocated_img1_data(::std::string* img1_data) {
  if (img1_data != NULL) {
    
  } else {
    
  }
  img1_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img1_data);
  // @@protoc_insertion_point(field_set_allocated:vio_input_proto.IMUCamData.img1_data)
}

// -------------------------------------------------------------------

// IMUCamVec

// repeated .vio_input_proto.IMUCamData imu_cam_data = 1;
inline int IMUCamVec::imu_cam_data_size() const {
  return imu_cam_data_.size();
}
inline void IMUCamVec::clear_imu_cam_data() {
  imu_cam_data_.Clear();
}
inline ::vio_input_proto::IMUCamData* IMUCamVec::mutable_imu_cam_data(int index) {
  // @@protoc_insertion_point(field_mutable:vio_input_proto.IMUCamVec.imu_cam_data)
  return imu_cam_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vio_input_proto::IMUCamData >*
IMUCamVec::mutable_imu_cam_data() {
  // @@protoc_insertion_point(field_mutable_list:vio_input_proto.IMUCamVec.imu_cam_data)
  return &imu_cam_data_;
}
inline const ::vio_input_proto::IMUCamData& IMUCamVec::imu_cam_data(int index) const {
  // @@protoc_insertion_point(field_get:vio_input_proto.IMUCamVec.imu_cam_data)
  return imu_cam_data_.Get(index);
}
inline ::vio_input_proto::IMUCamData* IMUCamVec::add_imu_cam_data() {
  // @@protoc_insertion_point(field_add:vio_input_proto.IMUCamVec.imu_cam_data)
  return imu_cam_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vio_input_proto::IMUCamData >&
IMUCamVec::imu_cam_data() const {
  // @@protoc_insertion_point(field_list:vio_input_proto.IMUCamVec.imu_cam_data)
  return imu_cam_data_;
}

// fixed64 real_timestamp = 2;
inline void IMUCamVec::clear_real_timestamp() {
  real_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IMUCamVec::real_timestamp() const {
  // @@protoc_insertion_point(field_get:vio_input_proto.IMUCamVec.real_timestamp)
  return real_timestamp_;
}
inline void IMUCamVec::set_real_timestamp(::google::protobuf::uint64 value) {
  
  real_timestamp_ = value;
  // @@protoc_insertion_point(field_set:vio_input_proto.IMUCamVec.real_timestamp)
}

// fixed64 dataset_timestamp = 3;
inline void IMUCamVec::clear_dataset_timestamp() {
  dataset_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IMUCamVec::dataset_timestamp() const {
  // @@protoc_insertion_point(field_get:vio_input_proto.IMUCamVec.dataset_timestamp)
  return dataset_timestamp_;
}
inline void IMUCamVec::set_dataset_timestamp(::google::protobuf::uint64 value) {
  
  dataset_timestamp_ = value;
  // @@protoc_insertion_point(field_set:vio_input_proto.IMUCamVec.dataset_timestamp)
}

// int32 frame_id = 4;
inline void IMUCamVec::clear_frame_id() {
  frame_id_ = 0;
}
inline ::google::protobuf::int32 IMUCamVec::frame_id() const {
  // @@protoc_insertion_point(field_get:vio_input_proto.IMUCamVec.frame_id)
  return frame_id_;
}
inline void IMUCamVec::set_frame_id(::google::protobuf::int32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:vio_input_proto.IMUCamVec.frame_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vio_input_proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vio_5finput_2eproto
