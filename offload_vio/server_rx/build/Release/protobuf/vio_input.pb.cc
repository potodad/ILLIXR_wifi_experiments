// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vio_input.proto

#include "vio_input.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_vio_5finput_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vio_5finput_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vec3;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vio_5finput_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IMUCamData;
}  // namespace protobuf_vio_5finput_2eproto
namespace vio_input_proto {
class Vec3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vec3>
      _instance;
} _Vec3_default_instance_;
class IMUCamDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUCamData>
      _instance;
} _IMUCamData_default_instance_;
class IMUCamVecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUCamVec>
      _instance;
} _IMUCamVec_default_instance_;
}  // namespace vio_input_proto
namespace protobuf_vio_5finput_2eproto {
static void InitDefaultsVec3() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vio_input_proto::_Vec3_default_instance_;
    new (ptr) ::vio_input_proto::Vec3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vio_input_proto::Vec3::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vec3 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVec3}, {}};

static void InitDefaultsIMUCamData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vio_input_proto::_IMUCamData_default_instance_;
    new (ptr) ::vio_input_proto::IMUCamData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vio_input_proto::IMUCamData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IMUCamData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIMUCamData}, {
      &protobuf_vio_5finput_2eproto::scc_info_Vec3.base,}};

static void InitDefaultsIMUCamVec() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vio_input_proto::_IMUCamVec_default_instance_;
    new (ptr) ::vio_input_proto::IMUCamVec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vio_input_proto::IMUCamVec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IMUCamVec =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIMUCamVec}, {
      &protobuf_vio_5finput_2eproto::scc_info_IMUCamData.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Vec3.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IMUCamData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IMUCamVec.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::Vec3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::Vec3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::Vec3, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamData, angular_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamData, linear_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamData, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamData, cols_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamData, img0_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamData, img1_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamVec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamVec, imu_cam_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamVec, real_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamVec, dataset_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vio_input_proto::IMUCamVec, frame_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vio_input_proto::Vec3)},
  { 8, -1, sizeof(::vio_input_proto::IMUCamData)},
  { 20, -1, sizeof(::vio_input_proto::IMUCamVec)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vio_input_proto::_Vec3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vio_input_proto::_IMUCamData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vio_input_proto::_IMUCamVec_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "vio_input.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017vio_input.proto\022\017vio_input_proto\"\'\n\004Ve"
      "c3\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\272\001\n\n"
      "IMUCamData\022\021\n\ttimestamp\030\001 \001(\006\022*\n\013angular"
      "_vel\030\002 \001(\0132\025.vio_input_proto.Vec3\022+\n\014lin"
      "ear_accel\030\003 \001(\0132\025.vio_input_proto.Vec3\022\014"
      "\n\004rows\030\004 \001(\005\022\014\n\004cols\030\005 \001(\005\022\021\n\timg0_data\030"
      "\006 \001(\014\022\021\n\timg1_data\030\007 \001(\014\"\203\001\n\tIMUCamVec\0221"
      "\n\014imu_cam_data\030\001 \003(\0132\033.vio_input_proto.I"
      "MUCamData\022\026\n\016real_timestamp\030\002 \001(\006\022\031\n\021dat"
      "aset_timestamp\030\003 \001(\006\022\020\n\010frame_id\030\004 \001(\005b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 406);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vio_input.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vio_5finput_2eproto
namespace vio_input_proto {

// ===================================================================

void Vec3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec3::kXFieldNumber;
const int Vec3::kYFieldNumber;
const int Vec3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec3::Vec3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vio_5finput_2eproto::scc_info_Vec3.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vio_input_proto.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:vio_input_proto.Vec3)
}

void Vec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:vio_input_proto.Vec3)
  SharedDtor();
}

void Vec3::SharedDtor() {
}

void Vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Vec3::descriptor() {
  ::protobuf_vio_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vio_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vec3& Vec3::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vio_5finput_2eproto::scc_info_Vec3.base);
  return *internal_default_instance();
}


void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:vio_input_proto.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vio_input_proto.Vec3)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vio_input_proto.Vec3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vio_input_proto.Vec3)
  return false;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vio_input_proto.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vio_input_proto.Vec3)
}

::google::protobuf::uint8* Vec3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vio_input_proto.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vio_input_proto.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vio_input_proto.Vec3)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vio_input_proto.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vec3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vio_input_proto.Vec3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vio_input_proto.Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vio_input_proto.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vio_input_proto.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vio_input_proto.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_vio_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vio_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMUCamData::InitAsDefaultInstance() {
  ::vio_input_proto::_IMUCamData_default_instance_._instance.get_mutable()->angular_vel_ = const_cast< ::vio_input_proto::Vec3*>(
      ::vio_input_proto::Vec3::internal_default_instance());
  ::vio_input_proto::_IMUCamData_default_instance_._instance.get_mutable()->linear_accel_ = const_cast< ::vio_input_proto::Vec3*>(
      ::vio_input_proto::Vec3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUCamData::kTimestampFieldNumber;
const int IMUCamData::kAngularVelFieldNumber;
const int IMUCamData::kLinearAccelFieldNumber;
const int IMUCamData::kRowsFieldNumber;
const int IMUCamData::kColsFieldNumber;
const int IMUCamData::kImg0DataFieldNumber;
const int IMUCamData::kImg1DataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUCamData::IMUCamData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vio_5finput_2eproto::scc_info_IMUCamData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vio_input_proto.IMUCamData)
}
IMUCamData::IMUCamData(const IMUCamData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  img0_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.img0_data().size() > 0) {
    img0_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img0_data_);
  }
  img1_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.img1_data().size() > 0) {
    img1_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img1_data_);
  }
  if (from.has_angular_vel()) {
    angular_vel_ = new ::vio_input_proto::Vec3(*from.angular_vel_);
  } else {
    angular_vel_ = NULL;
  }
  if (from.has_linear_accel()) {
    linear_accel_ = new ::vio_input_proto::Vec3(*from.linear_accel_);
  } else {
    linear_accel_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(cols_));
  // @@protoc_insertion_point(copy_constructor:vio_input_proto.IMUCamData)
}

void IMUCamData::SharedCtor() {
  img0_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img1_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&angular_vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&angular_vel_)) + sizeof(cols_));
}

IMUCamData::~IMUCamData() {
  // @@protoc_insertion_point(destructor:vio_input_proto.IMUCamData)
  SharedDtor();
}

void IMUCamData::SharedDtor() {
  img0_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img1_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete angular_vel_;
  if (this != internal_default_instance()) delete linear_accel_;
}

void IMUCamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IMUCamData::descriptor() {
  ::protobuf_vio_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vio_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUCamData& IMUCamData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vio_5finput_2eproto::scc_info_IMUCamData.base);
  return *internal_default_instance();
}


void IMUCamData::Clear() {
// @@protoc_insertion_point(message_clear_start:vio_input_proto.IMUCamData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  img0_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img1_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && angular_vel_ != NULL) {
    delete angular_vel_;
  }
  angular_vel_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_accel_ != NULL) {
    delete linear_accel_;
  }
  linear_accel_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(cols_));
  _internal_metadata_.Clear();
}

bool IMUCamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vio_input_proto.IMUCamData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vio_input_proto.Vec3 angular_vel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vio_input_proto.Vec3 linear_accel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_accel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rows = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cols = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes img0_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_img0_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes img1_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_img1_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vio_input_proto.IMUCamData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vio_input_proto.IMUCamData)
  return false;
#undef DO_
}

void IMUCamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vio_input_proto.IMUCamData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->timestamp(), output);
  }

  // .vio_input_proto.Vec3 angular_vel = 2;
  if (this->has_angular_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_angular_vel(), output);
  }

  // .vio_input_proto.Vec3 linear_accel = 3;
  if (this->has_linear_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_linear_accel(), output);
  }

  // int32 rows = 4;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rows(), output);
  }

  // int32 cols = 5;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cols(), output);
  }

  // bytes img0_data = 6;
  if (this->img0_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->img0_data(), output);
  }

  // bytes img1_data = 7;
  if (this->img1_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->img1_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vio_input_proto.IMUCamData)
}

::google::protobuf::uint8* IMUCamData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vio_input_proto.IMUCamData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->timestamp(), target);
  }

  // .vio_input_proto.Vec3 angular_vel = 2;
  if (this->has_angular_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_angular_vel(), deterministic, target);
  }

  // .vio_input_proto.Vec3 linear_accel = 3;
  if (this->has_linear_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_linear_accel(), deterministic, target);
  }

  // int32 rows = 4;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rows(), target);
  }

  // int32 cols = 5;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cols(), target);
  }

  // bytes img0_data = 6;
  if (this->img0_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->img0_data(), target);
  }

  // bytes img1_data = 7;
  if (this->img1_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->img1_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vio_input_proto.IMUCamData)
  return target;
}

size_t IMUCamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vio_input_proto.IMUCamData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes img0_data = 6;
  if (this->img0_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->img0_data());
  }

  // bytes img1_data = 7;
  if (this->img1_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->img1_data());
  }

  // .vio_input_proto.Vec3 angular_vel = 2;
  if (this->has_angular_vel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_vel_);
  }

  // .vio_input_proto.Vec3 linear_accel = 3;
  if (this->has_linear_accel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_accel_);
  }

  // fixed64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // int32 rows = 4;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // int32 cols = 5;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUCamData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vio_input_proto.IMUCamData)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUCamData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUCamData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vio_input_proto.IMUCamData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vio_input_proto.IMUCamData)
    MergeFrom(*source);
  }
}

void IMUCamData::MergeFrom(const IMUCamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vio_input_proto.IMUCamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.img0_data().size() > 0) {

    img0_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img0_data_);
  }
  if (from.img1_data().size() > 0) {

    img1_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img1_data_);
  }
  if (from.has_angular_vel()) {
    mutable_angular_vel()->::vio_input_proto::Vec3::MergeFrom(from.angular_vel());
  }
  if (from.has_linear_accel()) {
    mutable_linear_accel()->::vio_input_proto::Vec3::MergeFrom(from.linear_accel());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
}

void IMUCamData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vio_input_proto.IMUCamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUCamData::CopyFrom(const IMUCamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vio_input_proto.IMUCamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUCamData::IsInitialized() const {
  return true;
}

void IMUCamData::Swap(IMUCamData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUCamData::InternalSwap(IMUCamData* other) {
  using std::swap;
  img0_data_.Swap(&other->img0_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  img1_data_.Swap(&other->img1_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(angular_vel_, other->angular_vel_);
  swap(linear_accel_, other->linear_accel_);
  swap(timestamp_, other->timestamp_);
  swap(rows_, other->rows_);
  swap(cols_, other->cols_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IMUCamData::GetMetadata() const {
  protobuf_vio_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vio_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMUCamVec::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUCamVec::kImuCamDataFieldNumber;
const int IMUCamVec::kRealTimestampFieldNumber;
const int IMUCamVec::kDatasetTimestampFieldNumber;
const int IMUCamVec::kFrameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUCamVec::IMUCamVec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vio_5finput_2eproto::scc_info_IMUCamVec.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vio_input_proto.IMUCamVec)
}
IMUCamVec::IMUCamVec(const IMUCamVec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      imu_cam_data_(from.imu_cam_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&real_timestamp_, &from.real_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
    reinterpret_cast<char*>(&real_timestamp_)) + sizeof(frame_id_));
  // @@protoc_insertion_point(copy_constructor:vio_input_proto.IMUCamVec)
}

void IMUCamVec::SharedCtor() {
  ::memset(&real_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&real_timestamp_)) + sizeof(frame_id_));
}

IMUCamVec::~IMUCamVec() {
  // @@protoc_insertion_point(destructor:vio_input_proto.IMUCamVec)
  SharedDtor();
}

void IMUCamVec::SharedDtor() {
}

void IMUCamVec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IMUCamVec::descriptor() {
  ::protobuf_vio_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vio_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUCamVec& IMUCamVec::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vio_5finput_2eproto::scc_info_IMUCamVec.base);
  return *internal_default_instance();
}


void IMUCamVec::Clear() {
// @@protoc_insertion_point(message_clear_start:vio_input_proto.IMUCamVec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_cam_data_.Clear();
  ::memset(&real_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&real_timestamp_)) + sizeof(frame_id_));
  _internal_metadata_.Clear();
}

bool IMUCamVec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vio_input_proto.IMUCamVec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vio_input_proto.IMUCamData imu_cam_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_imu_cam_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 real_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &real_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 dataset_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frame_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vio_input_proto.IMUCamVec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vio_input_proto.IMUCamVec)
  return false;
#undef DO_
}

void IMUCamVec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vio_input_proto.IMUCamVec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vio_input_proto.IMUCamData imu_cam_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imu_cam_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->imu_cam_data(static_cast<int>(i)),
      output);
  }

  // fixed64 real_timestamp = 2;
  if (this->real_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->real_timestamp(), output);
  }

  // fixed64 dataset_timestamp = 3;
  if (this->dataset_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->dataset_timestamp(), output);
  }

  // int32 frame_id = 4;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frame_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vio_input_proto.IMUCamVec)
}

::google::protobuf::uint8* IMUCamVec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vio_input_proto.IMUCamVec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vio_input_proto.IMUCamData imu_cam_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imu_cam_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->imu_cam_data(static_cast<int>(i)), deterministic, target);
  }

  // fixed64 real_timestamp = 2;
  if (this->real_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->real_timestamp(), target);
  }

  // fixed64 dataset_timestamp = 3;
  if (this->dataset_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->dataset_timestamp(), target);
  }

  // int32 frame_id = 4;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frame_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vio_input_proto.IMUCamVec)
  return target;
}

size_t IMUCamVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vio_input_proto.IMUCamVec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vio_input_proto.IMUCamData imu_cam_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->imu_cam_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->imu_cam_data(static_cast<int>(i)));
    }
  }

  // fixed64 real_timestamp = 2;
  if (this->real_timestamp() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 dataset_timestamp = 3;
  if (this->dataset_timestamp() != 0) {
    total_size += 1 + 8;
  }

  // int32 frame_id = 4;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUCamVec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vio_input_proto.IMUCamVec)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUCamVec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUCamVec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vio_input_proto.IMUCamVec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vio_input_proto.IMUCamVec)
    MergeFrom(*source);
  }
}

void IMUCamVec::MergeFrom(const IMUCamVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vio_input_proto.IMUCamVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imu_cam_data_.MergeFrom(from.imu_cam_data_);
  if (from.real_timestamp() != 0) {
    set_real_timestamp(from.real_timestamp());
  }
  if (from.dataset_timestamp() != 0) {
    set_dataset_timestamp(from.dataset_timestamp());
  }
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
}

void IMUCamVec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vio_input_proto.IMUCamVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUCamVec::CopyFrom(const IMUCamVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vio_input_proto.IMUCamVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUCamVec::IsInitialized() const {
  return true;
}

void IMUCamVec::Swap(IMUCamVec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUCamVec::InternalSwap(IMUCamVec* other) {
  using std::swap;
  CastToBase(&imu_cam_data_)->InternalSwap(CastToBase(&other->imu_cam_data_));
  swap(real_timestamp_, other->real_timestamp_);
  swap(dataset_timestamp_, other->dataset_timestamp_);
  swap(frame_id_, other->frame_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IMUCamVec::GetMetadata() const {
  protobuf_vio_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vio_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vio_input_proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vio_input_proto::Vec3* Arena::CreateMaybeMessage< ::vio_input_proto::Vec3 >(Arena* arena) {
  return Arena::CreateInternal< ::vio_input_proto::Vec3 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vio_input_proto::IMUCamData* Arena::CreateMaybeMessage< ::vio_input_proto::IMUCamData >(Arena* arena) {
  return Arena::CreateInternal< ::vio_input_proto::IMUCamData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vio_input_proto::IMUCamVec* Arena::CreateMaybeMessage< ::vio_input_proto::IMUCamVec >(Arena* arena) {
  return Arena::CreateInternal< ::vio_input_proto::IMUCamVec >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
